# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q9P817LcEvy3E_JASkYfNRcHJMK_TVxY
"""

#CONV Model

class CarVis(nn.Module):
    def __init__(self, channels, classes):
        super(CarVis, self).__init__()
        self.inc = defconv(channels, 32)
        self.down0= downpass(32, 64)
        self.down1 = downpass(64, 128)
        self.down2 = downpass(128, 256)
        self.down3 = downpass(256, 512)
        self.down4 = downpass(512, 1024)
        self.up1 = uppass(2048, 256)
        self.up2 = uppass(512, 128)
        self.up3 = uppass(256, 64)
        self.up4 = uppass(128, 64)
        self.outc = nn.Conv2d(64, classes, 1)
        self.convlstm = ConvLSTM(input_s=(8,16),
                                 input_dim=512,
                                 hidden_dim=[512, 512],
                                 kernel_size=(3,3),
                                 num_layers=2,
                                 batch_first=False,
                                 bias=True,
                                 return_all_layers=False)

    def forward(self, x):
        x = torch.unbind(x, dim=1)
        data = []
        for item in x:
            x0 = self.inc(item)
            x1 = self.down0(x0)
            x2 = self.down1(x1)
            x3 = self.down2(x2)
            x4 = self.down3(x3)
            x5 = self.down4(x4)
            data.append(x5.unsqueeze(0))
        data = torch.cat(data, dim=0)
        lstm, _ = self.convlstm(data)
        test = lstm[0][ -1,:, :, :, :]
        x = self.up1(test, x4)
        x = self.up2(x, x3)
        x = self.up3(x, x2)
        x = self.up4(x, x1)
        x = self.conv(x)
        return x, test