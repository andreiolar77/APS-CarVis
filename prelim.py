# -*- coding: utf-8 -*-
"""prelim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q9P817LcEvy3E_JASkYfNRcHJMK_TVxY
"""

#Prelim Call
import torch
import torch.nn as nn
import torch.nn.functional as F
import math
import numpy as np
from torch.autograd import Variable
from torchvision import models
import operator
#import optuna

#Define Preliminary Func.

#ill make this function if we need it
def convertimage():
  final_dim=(224, 224)

class conv(nn.Module):
    def __init__(self, ins, out):
        super(conv, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(ins, out, 3, padding=1),
            nn.BatchNorm2d(out),
            nn.ReLU(inplace=True),
            nn.Conv2d(out, out, 3, padding=1),
            nn.BatchNorm2d(out),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        x = self.conv(x)
        return x


class defconv(nn.Module):
    def __init__(self, ins, out):
        super(defconv, self).__init__()
        self.conv = conv(ins, out)

    def forward(self, x):
        x = self.conv(x)
        return x


class downpass(nn.Module):
  #shrink the image to an internal representation and apply conv layers to it
  def __init__(self, ins, out):
    super(downpass, self).__init__()
    self.mpconv = nn.Sequential(
        nn.MaxPool2d(2, 1, 2),
        conv(ins,out)
    )

  def forward(self, x):
    x=self.mpconv(x)
    return x

class uppass(nn.Module):
    def __init__(self, ins, out):
        super(uppass, self).__init__()
        self.up = nn.ConvTranspose2d(ins//2, ins//2, 2, stride=2)
        self.conv = conv(ins, out)

    def forward(self, x1, x2):
        x1 = self.up(x1)
        diffX = x1.size()[2] - x2.size()[2]
        diffY = x1.size()[3] - x2.size()[3]
        x2 = F.pad(x2, (diffX // 2, int(diffX / 2),
                        diffY // 2, int(diffY / 2)))
        x = torch.cat([x2, x1], dim=1)
        x = self.conv(x)
        return x

class outconv(nn.Module):
    def __init__(self, ins, out):
        super(outconv, self).__init__()
        self.conv = nn.Conv2d(ins, out, 1)

    def forward(self, x):
        x = self.conv(x)
        return x
  

class CLSTMCell(nn.Module):
  def __init__(self, input_s, input_dim, hidden_dim, kernel_size, bias):
    #Comment
    super(CLSTMCell, self).__init__()

    self.height, self.width = input_s
    self.input_dim = input_dim
    self.hidden_dim = hidden_dim
    self.kernel_size = kernel_size
    self.padding = 2
    self.bias = bias

    self.conv = nn.Conv2d(in_channels=self.input_dim + self.hidden_dim,
                              out_channels=4 * self.hidden_dim,
                              kernel_size=self.kernel_size,
                              padding=self.padding,
                              bias=self.bias)
  def forward(self, input_t, cur_s):
    h_cur, c_cur = cur_s
    #map: h-> previous output state 
    #c-> previous output memory

    final_i = torch.cat([input_t, h_cur], dim=1)

    #convolve
    combined_conv = self.conv(final_i)

    cc_i, cc_f, cc_o, cc_g = torch.split(combined_conv, self.hidden_dim, dim=1)
    X1 = torch.sigmoid(cc_i)
    X2 = torch.sigmoid(cc_f)
    X3 = torch.sigmoid(cc_o)
    X4 = torch.tanh(cc_g)

    c_next = X2*c_cur + X1*X4
    h_next = X3 * torch.tanh(c_next)

    return h_next, c_next

  #not sure about this function call
  def init_hidden(self, batch_size):
        return (torch.zeros(batch_size, self.hidden_dim, self.height, self.width).cuda(),
                torch.zeros(batch_size, self.hidden_dim, self.height, self.width).cuda())

class ConvLSTM(nn.Module):

    def __init__(self, input_s, input_dim, hidden_dim, kernel_size, num_layers,
                 batch_first=False, bias=True, return_all_layers=False):
        super(ConvLSTM, self).__init__()

        self._check_kernel_size_consistency(kernel_size)

        # Make sure that both `kernel_size` and `hidden_dim` are lists having len == num_layers
        kernel_size = self._extend_for_multilayer(kernel_size, num_layers)
        hidden_dim = self._extend_for_multilayer(hidden_dim, num_layers)
        if not len(kernel_size) == len(hidden_dim) == num_layers:
            raise ValueError('Inconsistent list length.')

        self.height, self.width = input_s
        self.input_dim = input_dim
        self.hidden_dim = hidden_dim
        self.kernel_size = kernel_size
        self.num_layers = num_layers
        self.batch_first = batch_first
        self.bias = bias
        self.return_all_layers = return_all_layers

        cell_list = []
        for i in range(0, self.num_layers):
            cur_input_dim = self.input_dim if i == 0 else self.hidden_dim[i - 1]

            cell_list.append(CLSTMCell(input_s=(self.height, self.width),
                                          input_dim=cur_input_dim,
                                          hidden_dim=self.hidden_dim[i],
                                          kernel_size=self.kernel_size[i],
                                          bias=self.bias))

        self.cell_list = nn.ModuleList(cell_list)

    def forward(self, input_tensor, hidden_state=None):
        """
        Parameters
        ----------
        input_tensor: todo
            5-D Tensor either of shape (t, b, c, h, w) or (b, t, c, h, w)
        hidden_state: todo
            None. todo implement stateful
        Returns
        -------
        last_state_list, layer_output
        """
        if not self.batch_first:
            # (t, b, c, h, w) -> (b, t, c, h, w)
            input_tensor=input_tensor.permute(1, 0, 2, 3, 4)

        # Implement stateful ConvLSTM
        if hidden_state is not None:
            raise NotImplementedError()
        else:
            hidden_state = self._init_hidden(batch_size=input_tensor.size(0))

        layer_output_list = []
        last_state_list = []

        seq_len = input_tensor.size(1)
        cur_layer_input = input_tensor

        for layer_idx in range(self.num_layers):

            h, c = hidden_state[layer_idx]
            output_inner = []
            for t in range(seq_len):
                h, c = self.cell_list[layer_idx](input_tensor=cur_layer_input[:, t, :, :, :],
                                                 cur_state=[h, c])


                output_inner.append(h)

            layer_output = torch.stack(output_inner, dim=1)
            cur_layer_input = layer_output

            layer_output = layer_output.permute(1, 0, 2, 3, 4)

            layer_output_list.append(layer_output)
            last_state_list.append([h, c])

        if not self.return_all_layers:
            layer_output_list = layer_output_list[-1:]
            last_state_list = last_state_list[-1:]

        return layer_output_list, last_state_list

    def _init_hidden(self, batch_size):
        init_states = []
        for i in range(self.num_layers):
            init_states.append(self.cell_list[i].init_hidden(batch_size))
        return init_states

    def _check_kernel_size_consistency(kernel_size):
        if not (isinstance(kernel_size, tuple) or
                (isinstance(kernel_size, list) and all([isinstance(elem, tuple) for elem in kernel_size]))):
            raise ValueError('`kernel_size` must be tuple or list of tuples')
            
    def _extend_for_multilayer(param, num_layers):
        if not isinstance(param, list):
            param = [param] * num_layers
        return param